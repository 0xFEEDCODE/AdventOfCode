using System.Diagnostics;
using System.Text;

using Framework;

namespace Challenges2021;

public static partial class Ext {
    public static string PixelsAround(this int[][] grid, int i, int j) {
        var pixels = new StringBuilder();

        for (var v = -1; v < 2; v++) {
            for (var h = -1; h < 2; h++) {
                try { pixels.Append(grid[i + v][j + h].ToString()); } catch { pixels.Append('0'); }
            }
        }

        return pixels.ToString();
    }

    public static int BinToDec(this string bits) {
        var mul = 1;
        var n = 0;
        foreach(var bit in bits.Reverse()) {
            n += mul * int.Parse(bit.ToString());
            mul *= 2;
        }
        return n;
    }
    
}

public class Solution20 : SolutionFramework {
    public Solution20() : base(20) { }
    
    public override string[] Solve() {
        var alg = RawInputSplitByNl.First().Select(x=> {
            return x switch {
                '.' => 0,
                '#' => 1,
                _ => throw new ArgumentOutOfRangeException(nameof(x), x, null)
            };
        }).ToArray();
        const int h = 200,w = 200;
        var inputImage = (h, w).CreateGrid<int>();
        var outputImage = (h, w).CreateGrid<int>();
        inputImage.SetAllCellsToValue(0);
        outputImage.SetAllCellsToValue(0);

        var imageCoords = new HashSet<(int, int)>();
        
        var row = 2;
        foreach (var line in RawInputSplitByNl.Skip(2)) {
            var col = 2;
            foreach (var ch in line) {
                inputImage[row][col] = ch switch {
                    '.' => 0,
                    '#' => 1,
                    _ => throw new ArgumentOutOfRangeException()
                };
                imageCoords.Add((row, col));
                imageCoords.Add((row - 1, col - 1));
                imageCoords.Add((row - 1, col));
                imageCoords.Add((row - 1, col + 1));
                    
                imageCoords.Add((row, col - 1));
                imageCoords.Add((row, col + 1));
                    
                imageCoords.Add((row + 1, col - 1));
                imageCoords.Add((row + 1, col));
                imageCoords.Add((row + 1, col + 1));
                col++;
            }
            row++;
        }

        Console.WriteLine();

        for (var r = 0; r < 10; r++) {
            var originalImageCoords = imageCoords.ToArray();
            foreach(var (i, j) in originalImageCoords) {
                outputImage[i][j] = alg[inputImage.PixelsAround(i, j).BinToDec()];
                imageCoords.Add((i - 1, j - 1));
                imageCoords.Add((i - 1, j));
                imageCoords.Add((i - 1, j + 1));
                    
                imageCoords.Add((i, j - 1));
                imageCoords.Add((i, j + 1));
                    
                imageCoords.Add((i + 1, j - 1));
                imageCoords.Add((i + 1, j));
                imageCoords.Add((i + 1, j + 1));
            }

            if (r == 1)
                break;

            outputImage.ForEachCell((i,j)=>inputImage[i][j] = outputImage[i][j]);
            printOut(outputImage);
        }

        printOut(outputImage);
        
        AssignAnswer1(outputImage.Sum(r => r.Count(c => c==1)));

        return Answers;
    }

    private static void printOut(int[][] outputImage) {
        int i;
        for (i = 0; i < outputImage.Length; i++) {
            Console.WriteLine();
            for (var j = 0; j < outputImage[i].Length; j++) {
                Console.Write(outputImage[i][j] switch {
                    0 => '.',
                    1 => '#'
                });
            }
        }
    }
}
