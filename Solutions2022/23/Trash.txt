   public override string[] Solve() {
        var (grid, elves) = ParseInput();
        var rounds = 10;
        grid.ForEachCell((i, j) => {
            if (grid[i][j] == Tile.Elf) {
                Console.WriteLine();
            }
        });

        var shiftCounter = 0;
        for (var i = 0; i < rounds; i++) {
            var pm = new PriorityManager();
            pm.ShiftBy(shiftCounter);
            if (shiftCounter == 3)
                shiftCounter = 0;

            var elvesMoved = new List<int>();
            var option = 0;
            
            grid.PrintGrid();
            while (pm.PrioritiesQueue.TryPeek(out _) && pm.DequeuePrioWithValidationOffsets() is { } prioWithOffset) {
                var elvesOrdered = (option, shiftCounter) switch {
                    (0, 0) => elves.OrderedFromBot(),
                    (1, 0) => elves.OrderedFromTop(),
                    (2, 0) => elves.OrderedFromLeft(),
                    (3, 0) => elves.OrderedFromRight(),
                }
                foreach (var elf in elves.Where(e => elvesMoved.All(ev => e.Id != ev)).ToList().OrderedFromBot()) {
                    var proposal = prioWithOffset.ValidationOffsets.Select(x => new Coord(elf.Coord.Row + x.Row, elf.Coord.Col + x.Col)).ToArray();
                    if (!grid.AnyoneAround(elf.Coord)) continue;
                    if (elves.Any(e => proposal.Any(p => p == e.Coord))) continue;
                    
                    var coordForPrio = new List<Coord>() {
                        new(elf.Coord.Row - 1, elf.Coord.Col),
                        new(elf.Coord.Row + 1, elf.Coord.Col),
                        new(elf.Coord.Row, elf.Coord.Col + 1),
                        new(elf.Coord.Row, elf.Coord.Col - 1),
                    };
                    var validProposal = coordForPrio[(option+shiftCounter)%4];
                    
                    grid[elf.Coord.Row][elf.Coord.Col] = Tile.Empty;
                    elf.Coord = new Coord(validProposal.Row, validProposal.Col);
                    grid[elf.Coord.Row][elf.Coord.Col] = Tile.Elf;
                    
                    elvesMoved.Add(elf.Id);
                }
                
                Console.WriteLine();
                grid.PrintGrid();

                option++;
            }
            grid.PrintGrid();
            Console.WriteLine();
            shiftCounter++;
        }

        return Answers;
    }
